#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <cstdlib>
#include <conio.h>
#include <locale.h>
#include <malloc.h>

struct Employee
{
	int ID;
	char name[128];
	char post[128];
	int salary;
	char phoneNumber[16];
};

Employee* staff;
int count;
char fileName[128];
FILE* file;
char string[128];

void assigningString(char* str1, char* str2) {
	int i = 0;
	while (str2[i] != '\0') {
		str1[i] = str2[i];
		i++;
	}
	str1[i] = '\0';
}

char* readLineConsole() {
	char str[128] = "";
	char c;
	int i = 0;
	while ((c = getchar()) != '\n') {
		str[i] = c;
		i++;
	}
	assigningString(string, str);
	return string;
}

char* readLineFile() {
	char temp[128];
	fscanf(file, "%[^\n]\n", temp);
	int i = 0;
	while (temp[i] != ':') {
		i++;
	}
	i += 2;
	char str[128] = "";
	int j = 0;
	while (temp[i] != '\0') {
		str[j] = temp[i];
		i++;
		j++;
	}
	assigningString(string, str);
	return string;
}

int strToInt(char* str) {
	int i = 0;
	int result = 0;
	while (str[i] >= '0' && str[i] <= '9') {
		result = result * 10 + (str[i] - '0');
		i++;
	}
	return result;
}

void fWrite() {
	file = fopen(fileName, "w");
	fprintf(file, "Количество сотрудников: %d\n", count);
	for (int i = 0; i < count; i++) {
		fprintf(file, "ID: %d\n", staff[i].ID);
		fprintf(file, "ФИО: %s\n", staff[i].name);
		fprintf(file, "Должность: %s\n", staff[i].post);
		fprintf(file, "Зарплата: %d\n", staff[i].salary);
		fprintf(file, "Номер телефона: %s\n", staff[i].phoneNumber);
	}
	fclose(file);
}

void fRead() {
	free(staff);
	file = fopen(fileName, "r");
	count = strToInt(readLineFile());
	staff = (Employee*)malloc(count * sizeof(Employee));
	for (int i = 0; i < count; i++) {
		staff[i].ID = strToInt(readLineFile());
		assigningString(staff[i].name,readLineFile());
		assigningString(staff[i].post, readLineFile());
		staff[i].salary = strToInt(readLineFile());
		assigningString(staff[i].phoneNumber, readLineFile());
	}
	fclose(file);
}

void createDatabase() {
	printf("Введите название новой базы данных: ");
	assigningString(fileName, readLineConsole());
	file = fopen(fileName, "a");
	fclose(file);
}

void enteringNewEntries() {
	free(staff);
	printf("Введите название существующей базы данных: ");
	assigningString(fileName, readLineConsole());
	printf("Введите количество сотрудников: ");
	count = strToInt(readLineConsole());
	staff = (Employee*)malloc(count * sizeof(Employee));
	for (int i = 0; i < count; i++) {
		printf("Введите данные %d-го сотрудника:\n", i+1);
		printf("ID: ");
		staff[i].ID = strToInt(readLineConsole());
		printf("ФИО: ");
		assigningString(staff[i].name, readLineConsole());
		printf("Должность: ");
		assigningString(staff[i].post, readLineConsole());
		printf("Зарплата: ");
		staff[i].salary = strToInt(readLineConsole());
		printf("Номер телефона: ");
		assigningString(staff[i].phoneNumber, readLineConsole());
	}
	fWrite();
}

void recordSearch() {
	printf("Введите название существующей базы данных: ");
	assigningString(fileName, readLineConsole());
	fRead();
	int key;
	printf("Введите ключ: ");
	key = strToInt(readLineConsole());
	bool flag = false;
	for (int i = 0; i < count; i++) {
		if (staff[i].ID == key) {
			printf("-----\n");
			printf("ID: %d\n", staff[i].ID);
			printf("ФИО: %s\n", staff[i].name);
			printf("Должность: %s\n", staff[i].post);
			printf("Зарплата: %d\n", staff[i].salary);
			printf("Номер телефона: %s\n", staff[i].phoneNumber);
			flag = true;
			break;
		}
	}
	if (flag == false) {
		printf("Запись не найдена!\n");
	}
}

void addingEntry() {
	printf("Введите название существующей базы данных: ");
	assigningString(fileName, readLineConsole());
	fRead();
	count++;
	staff = (Employee*)realloc(staff, count * sizeof(Employee));
	printf("Введите данные нового сотрудника:\n");
	printf("ID: ");
	staff[count - 1].ID = strToInt(readLineConsole());
	printf("ФИО: ");
	assigningString(staff[count - 1].name, readLineConsole());
	printf("Должность: ");
	assigningString(staff[count - 1].post, readLineConsole());
	printf("Зарплата: ");
	staff[count - 1].salary = strToInt(readLineConsole());
	printf("Номер телефона: ");
	assigningString(staff[count - 1].phoneNumber, readLineConsole());
	fWrite();
}

void deletingEntry() {
	printf("Введите название существующей базы данных: ");
	assigningString(fileName, readLineConsole());
	fRead();
	int ID;
	printf("Введите ID сотрудника, которого хотите удалить: ");
	ID = strToInt(readLineConsole());
	for (int i = 0; i < count; i++) {
		if (staff[i].ID == ID) {
			for (int j = i; j < count-1; j++) {
				staff[i] = staff[i + 1];
			}
			break;
		}
	}
	count--;
	staff = (Employee*)realloc(staff, count * sizeof(Employee));
	fWrite();
}

void viewingDatabase() {
	printf("Введите название существующей базы данных: ");
	assigningString(fileName, readLineConsole());
	fRead();
	for (int i = 0; i < count; i++) {
		printf("-----\n");
		printf("ID: %d\n", staff[i].ID);
		printf("ФИО: %s\n", staff[i].name);
		printf("Должность: %s\n", staff[i].post);
		printf("Зарплата: %d\n", staff[i].salary);
		printf("Номер телефона: %s\n", staff[i].phoneNumber);
	}
}

int main() {
	setlocale(LC_ALL, "Rus");

	int number = 0;

	while (number != 7) {
		printf("--------------------\n");
		printf("Введите номер операции, которую хотите совершить:\n");
		printf("1. Создать новую базу данных\n");
		printf("2. Ввод новых записей\n");
		printf("3. Поиск записи по ключу\n");
		printf("4. Добавление записи\n");
		printf("5. Удаление записи\n");
		printf("6. Просмотр базы данных\n");
		printf("7. Выход\n");
		printf("--------------------\n");
		printf("Операция номер: ");
		number = strToInt(readLineConsole());
		switch (number) {
		case 1:
			createDatabase(); break;
		case 2:
			enteringNewEntries(); break;
		case 3:
			recordSearch(); break;
		case 4:
			addingEntry(); break;
		case 5:
			deletingEntry(); break;
		case 6:
			viewingDatabase(); break;
		default:
			break;
		}
	}
}